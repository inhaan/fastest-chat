{"version":3,"file":"static/js/225.2ce393e3.chunk.js","mappings":"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","sources":["img/chat.svg","hook/useCssVar.ts","component/MainTitle.tsx","component/MainChatRooms.tsx","page/Main.tsx","store/chatDB.ts"],"sourcesContent":["var _path, _linearGradient, _path2, _path3, _circle, _circle2, _circle3;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgChat(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 400,\n    height: 400,\n    id: \"chat\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2A94F4\",\n    d: \"M261.037 297.928c-6.253 6.731-13.381 12.81-21.212 18.095-21.628 14.653-48.694 23.35-78.082 23.35-20.519 0-39.907-4.236-57.086-11.782C80.3 352.407 41.39 350.147 41.39 350.147l30.59-43.054c-23.747-20.488-38.472-49.03-38.472-80.618 0-28.095 11.649-53.787 30.926-73.542 6.822-6.985 14.603-13.238 23.156-18.584-5.194 13.075-8.024 27.127-8.024 41.76 0 69.764 64.234 126.31 143.458 126.31 13.166 0 25.905-1.558 38.013-4.491z\"\n  })), _linearGradient || (_linearGradient = /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"a\",\n    x1: 184.772,\n    x2: 184.772,\n    y1: 113.576,\n    y2: 302.419,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.394,\n    stopColor: \"#80e8be\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#00c278\"\n  }))), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"url(#a)\",\n    d: \"M289.977 226.475c0 27.117-10.845 51.995-28.939 71.454-12.108 2.933-24.847 4.491-38.013 4.491-79.224 0-143.458-56.546-143.458-126.31 0-14.632 2.83-28.685 8.024-41.76 20.936-13.075 46.516-20.773 74.152-20.773 70.822-.001 128.234 50.537 128.234 112.898z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#CCE9FF\",\n    d: \"m323.458 266.3 34.226 48.175s-43.543 2.525-70.782-25.233a155.02 155.02 0 0 1-25.864 8.686c-12.108 2.933-24.847 4.491-38.013 4.491-79.224 0-143.458-56.546-143.458-126.31 0-14.632 2.83-28.685 8.024-41.76C107.172 85.104 160.419 49.8 223.024 49.8c79.232 0 143.467 56.536 143.467 126.309 0 35.336-16.466 67.27-43.033 90.191z\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 169.462,\n    cy: 183.78,\n    r: 20.53,\n    fill: \"#2A94F4\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 225.065,\n    cy: 183.78,\n    r: 20.53,\n    fill: \"#2A94F4\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 280.669,\n    cy: 183.78,\n    r: 20.53,\n    fill: \"#2A94F4\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgChat);\nexport default __webpack_public_path__ + \"static/media/chat.70046fe1a2ac3456d42dfc650b4ffa12.svg\";\nexport { ForwardRef as ReactComponent };","import { useLayoutEffect } from \"react\";\n\nexport const useCssVar = () => {\n  // 모바일에서 키보드가 올라오면 뷰포트가 줄어들어서 레이아웃이 깨지는 현상을 방지하기 위해\n  useLayoutEffect(() => {\n    const vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\n  }, []);\n};\n","import { memo, useCallback, useState } from \"react\";\nimport { FaArrowRight } from \"react-icons/fa\";\n\ninterface IMainTitleProps {\n  goChatRoom: (chatRoomId: string) => void;\n}\nexport const MainTitle = memo(({ goChatRoom }: IMainTitleProps) => {\n  const [chatRoomId, setChatRoomId] = useState(\"\");\n\n  const onChangeChatRoomId = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      let value = e.target.value;\n      if (value.includes(\" \")) {\n        value = value.replace(\" \", \"\");\n      }\n      setChatRoomId(value);\n    },\n    []\n  );\n\n  const onKeyDownChatRoomId = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\") {\n        goChatRoom(chatRoomId);\n      }\n    },\n    [chatRoomId, goChatRoom]\n  );\n\n  const onClickGoChatRoom = useCallback(() => {\n    goChatRoom(chatRoomId);\n  }, [chatRoomId, goChatRoom]);\n\n  return (\n    <div\n      className=\"flex flex-col sm:flex-row justify-center items-center font-bold gap-5\"\n      style={{ paddingTop: \"calc(var(--vh, 1vh) * 20)\" }}\n    >\n      <div className=\"flex flex-col sm:flex-row gap-2 items-center\">\n        <div className=\"text-white text-4xl\">fastest-chat.com/</div>\n        <input\n          type=\"text\"\n          className=\"inline-block w-52 rounded-lg outline-none px-4 py-5 text-2xl shadow-xl\"\n          autoFocus\n          autoComplete=\"on\"\n          placeholder=\"채팅방 이름\"\n          value={chatRoomId}\n          onChange={onChangeChatRoomId}\n          onKeyDown={onKeyDownChatRoomId}\n        />\n      </div>\n      <div\n        className=\"text-3xl cursor-pointer transition-all text-yellow-300 hover:text-yellow-400 active:text-yellow-500\"\n        onClick={onClickGoChatRoom}\n      >\n        <FaArrowRight className=\"inline-block\" />\n      </div>\n    </div>\n  );\n});\n","import dayjs from \"dayjs\";\nimport { FaXmark } from \"react-icons/fa6\";\nimport { IChatRoom } from \"../type/chatType\";\nimport imgChat from \"../img/chat.svg\";\nimport { memo, useCallback } from \"react\";\n\ninterface IMainChatRoomsProps {\n  chatRooms: IChatRoom[];\n  onGoChatRoom: (chatRoomId: string) => void;\n  onDeleteChatRoom: (chatRoomId: string) => void;\n}\n\nexport const MainChatRooms = memo(\n  ({ chatRooms, onGoChatRoom, onDeleteChatRoom }: IMainChatRoomsProps) => {\n    const onClickDelete = useCallback(\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.stopPropagation();\n        const chatRoomId = e.currentTarget.dataset.chat_room_id;\n        if (!chatRoomId) {\n          return;\n        }\n        if (!window.confirm(\"기록을 삭제하시겠습니까?\")) {\n          return;\n        }\n        onDeleteChatRoom(chatRoomId);\n      },\n      [onDeleteChatRoom]\n    );\n\n    const onClickChatRoom = useCallback(\n      (e: React.MouseEvent<HTMLLIElement>) => {\n        const chatRoomId = e.currentTarget.dataset.chat_room_id;\n        if (!chatRoomId) {\n          return;\n        }\n        onGoChatRoom(chatRoomId);\n      },\n      [onGoChatRoom]\n    );\n\n    return (\n      <ul className=\"w-4/5 max-w-md mt-32 bg-white rounded-lg shadow-lg overflow-hidden\">\n        {chatRooms.map((chatRoom) => (\n          <li\n            key={chatRoom.roomId}\n            data-chat_room_id={chatRoom.roomId}\n            className=\"flex items-center gap-2 cursor-pointer px-3 py-2 sm:px-7 sm:py-5 border-b hover:bg-gray-100 active:bg-gray-200 transition-all \"\n            onClick={onClickChatRoom}\n          >\n            <img src={imgChat} alt=\"chat\" className=\"w-7 h-7 mr-2\" />\n            <div className=\"flex-1 flex flex-col\">\n              <div className=\"w-full flex justify-between\">\n                <div className=\"break-all\">{chatRoom.roomId}</div>\n                <div className=\"flex items-center gap-5\">\n                  <div className=\" text-sm text-gray-400\">\n                    {dayjs(chatRoom.latestMessage.timestamp).format(\"YY.MM.DD\")}\n                  </div>\n                  <button\n                    data-chat_room_id={chatRoom.roomId}\n                    className=\"flex transition-all text-gray-500 hover:text-rose-400 active:text-rose-500\"\n                    onClick={onClickDelete}\n                  >\n                    <FaXmark className=\"inline-block\" />\n                  </button>\n                </div>\n              </div>\n              <div className=\"text-gray-400\">\n                {chatRoom.latestMessage.content}\n              </div>\n            </div>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n);\n","import { memo, useCallback, useLayoutEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useCssVar } from \"../hook/useCssVar\";\nimport { MainTitle } from \"../component/MainTitle\";\nimport { chatDB } from \"../store/chatDB\";\nimport { IChatRoom } from \"../type/chatType\";\nimport imgBg from \"../img/pexels-alexander-kovalev-2847648.jpg\";\nimport { MainChatRooms } from \"../component/MainChatRooms\";\n\nconst Main = memo(() => {\n  useCssVar();\n  const navigate = useNavigate();\n  const [chatRooms, setChatRooms] = useState<IChatRoom[]>([]);\n\n  const onGoChatRoom = useCallback(\n    (chatRoomId: string) => {\n      if (!chatRoomId) {\n        alert(\"채팅방 이름을 입력해주세요.\");\n        return;\n      }\n      navigate(`/${chatRoomId}`);\n    },\n    [navigate]\n  );\n\n  const onDeleteChatRoom = useCallback((chatRoomId: string) => {\n    chatDB.deleteChatRoom(chatRoomId).then(() => {\n      chatDB.getAllChatRooms().then((chatRooms) => {\n        setChatRooms(chatRooms);\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    chatDB.getAllChatRooms().then((chatRooms) => {\n      setChatRooms(chatRooms);\n    });\n  }, []);\n\n  return (\n    <div\n      className=\"h-screen\"\n      style={{\n        backgroundImage: `url(${imgBg})`,\n        height: \"calc(var(--vh, 1vh) * 100)\",\n      }}\n    >\n      <main>\n        <section>\n          <MainTitle goChatRoom={onGoChatRoom} />\n        </section>\n        <section className=\"flex justify-center\">\n          <MainChatRooms\n            chatRooms={chatRooms}\n            onGoChatRoom={onGoChatRoom}\n            onDeleteChatRoom={onDeleteChatRoom}\n          />\n        </section>\n      </main>\n    </div>\n  );\n});\n\nexport default Main;\n","import _ from \"lodash\";\nimport { IChatRoom, IMessage } from \"../type/chatType\";\n\n// IndexedDB 초기화\nconst openDB = (): Promise<IDBDatabase> => {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open(\"ChatDB\", 1);\n\n    request.onerror = (event) => {\n      console.error(\"IndexedDB에 접근하는 동안 오류가 발생했습니다.\");\n      reject(\"오류\");\n    };\n\n    request.onsuccess = (event: any) => {\n      const db = event.target.result as IDBDatabase;\n      resolve(db);\n    };\n\n    request.onupgradeneeded = (event: any) => {\n      const db = event.target.result as IDBDatabase;\n      const objectStore = db.createObjectStore(\"Chats\", { keyPath: \"roomId\" });\n      objectStore.createIndex(\"roomId\", \"roomId\", { unique: true });\n    };\n  });\n};\n\n// 여러 메시지 한꺼번에 저장\nconst saveMessages = async (\n  roomId: string,\n  messages: IMessage[]\n): Promise<void> => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"Chats\", \"readwrite\");\n    const objectStore = transaction.objectStore(\"Chats\");\n\n    const request = objectStore.get(roomId);\n\n    request.onsuccess = (event: any) => {\n      let chatData = event.target.result as\n        | { roomId: string; messages: IMessage[] }\n        | undefined;\n      chatData = chatData || { roomId, messages: [] };\n      chatData.messages = messages;\n      const updateRequest = objectStore.put(chatData);\n\n      updateRequest.onerror = (event) => {\n        console.error(\"메시지를 저장하는 동안 오류가 발생했습니다.\");\n        reject(\"오류\");\n      };\n\n      updateRequest.onsuccess = (event) => {\n        resolve();\n      };\n    };\n\n    request.onerror = (event) => {\n      console.error(\"채팅방 데이터를 가져오는 동안 오류가 발생했습니다.\");\n      reject(\"오류\");\n    };\n  });\n};\n\n// 전체 채팅방 데이터 조회\nconst getAllChatRooms = async (): Promise<IChatRoom[]> => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"Chats\", \"readonly\");\n    const objectStore = transaction.objectStore(\"Chats\");\n    const request = objectStore.getAll();\n\n    request.onsuccess = (event: any) => {\n      const orgChatRooms = event.target.result as {\n        roomId: string;\n        messages: IMessage[];\n      }[];\n      const chatRooms = orgChatRooms\n        .map((chatRoom) => {\n          const latestMessage = _.sortBy(\n            chatRoom.messages,\n            \"timestamp\"\n          ).pop() as IMessage;\n          return {\n            roomId: chatRoom.roomId,\n            latestMessage,\n          };\n        })\n        .filter((chatRoom) => chatRoom.latestMessage);\n      resolve(chatRooms);\n    };\n\n    request.onerror = (event) => {\n      console.error(\"전체 채팅방 데이터를 가져오는 동안 오류가 발생했습니다.\");\n      reject(\"오류\");\n    };\n  });\n};\n\n// 특정 채팅방의 메시지 가져오기\nconst getMessagesByRoomId = async (roomId: string): Promise<IMessage[]> => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"Chats\", \"readonly\");\n    const objectStore = transaction.objectStore(\"Chats\");\n\n    const request = objectStore.get(roomId);\n\n    request.onsuccess = (event: any) => {\n      const chatData = event.target.result as\n        | { roomId: string; messages: IMessage[] }\n        | undefined;\n      const messages = chatData ? chatData.messages : [];\n      resolve(messages);\n    };\n\n    request.onerror = (event) => {\n      console.error(\"채팅방 데이터를 가져오는 동안 오류가 발생했습니다.\");\n      reject(\"오류\");\n    };\n  });\n};\n\n// 채팅방 삭제\nconst deleteChatRoom = async (roomId: string): Promise<void> => {\n  const db = await openDB();\n  return new Promise((resolve, reject) => {\n    const transaction = db.transaction(\"Chats\", \"readwrite\");\n    const objectStore = transaction.objectStore(\"Chats\");\n\n    const request = objectStore.delete(roomId);\n\n    request.onsuccess = (event) => {\n      resolve();\n    };\n\n    request.onerror = (event) => {\n      console.error(\"채팅방을 삭제하는 동안 오류가 발생했습니다.\");\n      reject(\"오류\");\n    };\n  });\n};\n\nexport const chatDB = {\n  saveMessages,\n  getAllChatRooms,\n  getMessagesByRoomId,\n  deleteChatRoom,\n};\n"],"names":["useCssVar","useLayoutEffect","vh","window","innerHeight","document","documentElement","style","setProperty","concat","MainTitle","memo","_ref","goChatRoom","_useState","useState","_useState2","_slicedToArray","chatRoomId","setChatRoomId","onChangeChatRoomId","useCallback","e","value","target","includes","replace","onKeyDownChatRoomId","key","onClickGoChatRoom","_jsxs","className","paddingTop","children","_jsx","type","autoFocus","autoComplete","placeholder","onChange","onKeyDown","onClick","FaArrowRight","MainChatRooms","chatRooms","onGoChatRoom","onDeleteChatRoom","onClickDelete","stopPropagation","currentTarget","dataset","chat_room_id","confirm","onClickChatRoom","map","chatRoom","roomId","src","imgChat","alt","dayjs","latestMessage","timestamp","format","FaXmark","content","navigate","useNavigate","setChatRooms","alert","chatDB","deleteChatRoom","then","getAllChatRooms","backgroundImage","imgBg","height","openDB","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","onsuccess","db","result","onupgradeneeded","createObjectStore","keyPath","createIndex","unique","saveMessages","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messages","wrap","_context","prev","next","sent","abrupt","objectStore","transaction","get","chatData","updateRequest","put","stop","_x","_x2","apply","arguments","_ref2","_callee2","_context2","getAll","_","pop","filter","getMessagesByRoomId","_ref3","_callee3","_context3","_x3","_ref4","_callee4","_context4","delete","_x4"],"sourceRoot":""}