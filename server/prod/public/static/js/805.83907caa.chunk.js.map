{"version":3,"file":"static/js/805.83907caa.chunk.js","mappings":"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","sources":["img/chat.svg","hook/useCssVar.ts","component/ChatBackground.tsx","component/ChatBox.tsx","component/ChatContainer.tsx","component/ChatFooter.tsx","component/Badge.tsx","component/ChatHeader.tsx","hook/useWindowSize.ts","component/ChatEditor.tsx","hook/useDevice.ts","component/ChatMain.tsx","store/chatReducer.ts","component/ChatMessages.tsx","component/ChatMembers.tsx","hook/useChatConnect.ts","webSocket/messageHandler.ts","webSocket/listen/clients.ts","webSocket/listen/join.ts","webSocket/listen/leave.ts","webSocket/listen/message.ts","page/Chat.tsx","hook/useChatStore.ts","api/checkNickname.ts","store/chatDB.ts"],"sourcesContent":["var _path, _linearGradient, _path2, _path3, _circle, _circle2, _circle3;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgChat(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 400,\n    height: 400,\n    id: \"chat\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#2A94F4\",\n    d: \"M261.037 297.928c-6.253 6.731-13.381 12.81-21.212 18.095-21.628 14.653-48.694 23.35-78.082 23.35-20.519 0-39.907-4.236-57.086-11.782C80.3 352.407 41.39 350.147 41.39 350.147l30.59-43.054c-23.747-20.488-38.472-49.03-38.472-80.618 0-28.095 11.649-53.787 30.926-73.542 6.822-6.985 14.603-13.238 23.156-18.584-5.194 13.075-8.024 27.127-8.024 41.76 0 69.764 64.234 126.31 143.458 126.31 13.166 0 25.905-1.558 38.013-4.491z\"\n  })), _linearGradient || (_linearGradient = /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"a\",\n    x1: 184.772,\n    x2: 184.772,\n    y1: 113.576,\n    y2: 302.419,\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 0.394,\n    stopColor: \"#80e8be\"\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    offset: 1,\n    stopColor: \"#00c278\"\n  }))), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"url(#a)\",\n    d: \"M289.977 226.475c0 27.117-10.845 51.995-28.939 71.454-12.108 2.933-24.847 4.491-38.013 4.491-79.224 0-143.458-56.546-143.458-126.31 0-14.632 2.83-28.685 8.024-41.76 20.936-13.075 46.516-20.773 74.152-20.773 70.822-.001 128.234 50.537 128.234 112.898z\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"#CCE9FF\",\n    d: \"m323.458 266.3 34.226 48.175s-43.543 2.525-70.782-25.233a155.02 155.02 0 0 1-25.864 8.686c-12.108 2.933-24.847 4.491-38.013 4.491-79.224 0-143.458-56.546-143.458-126.31 0-14.632 2.83-28.685 8.024-41.76C107.172 85.104 160.419 49.8 223.024 49.8c79.232 0 143.467 56.536 143.467 126.309 0 35.336-16.466 67.27-43.033 90.191z\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 169.462,\n    cy: 183.78,\n    r: 20.53,\n    fill: \"#2A94F4\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 225.065,\n    cy: 183.78,\n    r: 20.53,\n    fill: \"#2A94F4\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 280.669,\n    cy: 183.78,\n    r: 20.53,\n    fill: \"#2A94F4\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgChat);\nexport default __webpack_public_path__ + \"static/media/chat.70046fe1a2ac3456d42dfc650b4ffa12.svg\";\nexport { ForwardRef as ReactComponent };","import { useLayoutEffect } from \"react\";\r\n\r\nexport const useCssVar = () => {\r\n  // 모바일에서 키보드가 올라오면 뷰포트가 줄어들어서 레이아웃이 깨지는 현상을 방지하기 위해\r\n  useLayoutEffect(() => {\r\n    const vh = window.innerHeight * 0.01;\r\n    document.documentElement.style.setProperty(\"--vh\", `${vh}px`);\r\n  }, []);\r\n};\r\n","import { PropsWithChildren, memo } from \"react\";\r\n\r\nexport const ChatBackground = memo(({ children }: PropsWithChildren) => {\r\n  return (\r\n    <div\r\n      className=\"flex justify-center sm:p-10 bg-neutral-200\"\r\n      style={{ height: \"calc(var(--vh, 1vh) * 100)\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n","import { PropsWithChildren, memo } from \"react\";\r\n\r\nexport const ChatBox = memo(({ children }: PropsWithChildren) => {\r\n  return (\r\n    <div className=\"flex-1 flex flex-col bg-white overflow-hidden sm:rounded-xl shadow-2xl\">\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n","import { PropsWithChildren, memo } from \"react\";\r\n\r\nexport const ChatContainer = memo(({ children }: PropsWithChildren) => {\r\n  return <div className=\"flex flex-col w-full max-w-5xl\">{children}</div>;\r\n});\r\n","import { memo } from \"react\";\r\n\r\nexport const ChatFooter = memo(() => {\r\n  return (\r\n    <footer className=\"w-full pt-5 text-xs text-right text-gray-400\">\r\n      <div>\r\n        <i>© 2023 </i>\r\n        <i>developed by inhan</i>\r\n      </div>\r\n      <a\r\n        href=\"https://iconscout.com/icons/chat\"\r\n        target=\"_blank\"\r\n        rel=\"noreferrer\"\r\n      >\r\n        Free Chat Icon\r\n      </a>\r\n      by\r\n      <a href=\"https://iconscout.com/contributors/delesign\">\r\n        Delesign Graphics\r\n      </a>\r\n      on <a href=\"https://iconscout.com\">IconScout</a>\r\n    </footer>\r\n  );\r\n});\r\n","import { PropsWithChildren, memo } from \"react\";\r\n\r\nexport const Badge = memo(({ children }: PropsWithChildren) => {\r\n  return (\r\n    <div className=\"flex justify-center absolute items-center top-0 right-0 p-1 min-w-[1.25rem] h-5 text-xs text-white bg-red-500 rounded-full translate-x-1 -translate-y-1\">\r\n      {children}\r\n    </div>\r\n  );\r\n});\r\n","import { memo, useCallback, useMemo } from \"react\";\r\nimport { BiExit } from \"react-icons/bi\";\r\nimport { BsPeopleFill } from \"react-icons/bs\";\r\nimport imgChat from \"../img/chat.svg\";\r\nimport { Badge } from \"./Badge\";\r\n\r\ninterface IChatHeaderProps {\r\n  title: string;\r\n  memberCount: number;\r\n  isOpenMembers: boolean;\r\n  toggleOpenMembers: () => void;\r\n  onLeave: () => void;\r\n}\r\n\r\nexport const ChatHeader = memo(\r\n  ({\r\n    title,\r\n    memberCount,\r\n    isOpenMembers,\r\n    toggleOpenMembers,\r\n    onLeave,\r\n  }: IChatHeaderProps) => {\r\n    const membersStyle = useMemo(() => {\r\n      return isOpenMembers\r\n        ? \"bg-sky-400 hover:bg-sky-500 active:bg-sky-600\"\r\n        : \"bg-slate-200 hover:bg-slate-300 active:bg-slate-400\";\r\n    }, [isOpenMembers]);\r\n\r\n    const onClickLeave = useCallback(() => {\r\n      if (window.confirm(\"채팅방을 나가시겠습니까?\")) {\r\n        onLeave();\r\n      }\r\n    }, [onLeave]);\r\n\r\n    return (\r\n      <header className=\"relative flex justify-between p-5 bg-neutral-50 shadow-sm\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <img src={imgChat} alt=\"chat\" className=\"w-9 h-9\" />\r\n          <h1 className=\"font-bold text-lg sm:text-xl break-all\">{title}</h1>\r\n        </div>\r\n\r\n        <div className=\"flex gap-3 items-center\">\r\n          <button\r\n            title=\"참가자\"\r\n            className={`relative p-2.5 rounded-full opacity-80  transition-all ${membersStyle}`}\r\n            onClick={toggleOpenMembers}\r\n          >\r\n            <BsPeopleFill className=\"text-xl text-slate-600\" />\r\n            <Badge>{memberCount}</Badge>\r\n          </button>\r\n\r\n          <button\r\n            title=\"나가기\"\r\n            className=\"p-2.5 rounded-full bg-slate-200 opacity-80 hover:bg-slate-300 active:bg-slate-400 transition-all\"\r\n            onClick={onClickLeave}\r\n          >\r\n            <BiExit className=\"text-xl text-slate-600\" />\r\n          </button>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n);\r\n","import { useState, useLayoutEffect } from \"react\";\r\n\r\nexport const useWindowSize = () => {\r\n  const [size, setSize] = useState({\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n  });\r\n\r\n  useLayoutEffect(() => {\r\n    const handleResize = () => {\r\n      setSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return {\r\n    width: size.width,\r\n    height: size.height,\r\n    isSmall: size.width < 640,\r\n  };\r\n};\r\n","import _ from \"lodash\";\r\nimport { useState, useMemo, useRef, memo, useCallback } from \"react\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport { PiPaperPlaneRightFill } from \"react-icons/pi\";\r\nimport { useWindowSize } from \"../hook/useWindowSize\";\r\nimport { useDevice } from \"../hook/useDevice\";\r\n\r\ninterface IChatEditorProps {\r\n  disabled?: boolean;\r\n  onSend: (content: string) => void;\r\n}\r\n\r\nexport const ChatEditor = memo(({ disabled, onSend }: IChatEditorProps) => {\r\n  const [content, setContent] = useState(\"\");\r\n  const { isSmall } = useWindowSize();\r\n  const { isDesktop } = useDevice();\r\n  const editorRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const sendStyle = useMemo(() => {\r\n    return content ? \"text-rose-400\" : \"text-gray-400\";\r\n  }, [content]);\r\n\r\n  const sendContent = useMemo(() => {\r\n    return _.throttle((content: string) => {\r\n      if (content) {\r\n        onSend(content);\r\n        setContent(\"\");\r\n      }\r\n    }, 500);\r\n  }, [onSend]);\r\n\r\n  const onChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setContent(e.target.value);\r\n  }, []);\r\n\r\n  const onKeyDown = useCallback(\r\n    (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n      if (e.key === \"Enter\" && !e.shiftKey && isDesktop) {\r\n        e.preventDefault();\r\n        sendContent(content);\r\n      }\r\n    },\r\n    [content, isDesktop, sendContent]\r\n  );\r\n\r\n  const onClick = useCallback(() => {\r\n    sendContent(content);\r\n    editorRef.current?.focus();\r\n  }, [content, sendContent]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"relative\">\r\n        <TextareaAutosize\r\n          ref={editorRef}\r\n          className=\"w-full resize-none outline-none p-3 sm:p-5 transition-all\"\r\n          minRows={isSmall ? 1 : 2}\r\n          maxRows={8}\r\n          autoFocus\r\n          placeholder=\"대화를 입력하세요\"\r\n          disabled={disabled}\r\n          value={content}\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n        />\r\n        <div className=\"absolute bottom-0 right-0 p-5\">\r\n          <PiPaperPlaneRightFill\r\n            className={`text-2xl transition-all cursor-pointer ${sendStyle}`}\r\n            onClick={onClick}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n","import { useMemo } from \"react\";\r\n\r\nexport const useDevice = () => {\r\n  const isMobile = useMemo(() => {\r\n    return /iPhone|iPad|iPod|Android|webOS|BlackBerry|Windows Phone/i.test(\r\n      navigator.userAgent\r\n    );\r\n  }, []);\r\n\r\n  const isDesktop = useMemo(() => {\r\n    return !isMobile;\r\n  }, [isMobile]);\r\n\r\n  return {\r\n    isMobile,\r\n    isDesktop,\r\n  };\r\n};\r\n","import { PropsWithChildren, memo } from \"react\";\r\n\r\ninterface IChatMainProps extends PropsWithChildren {\r\n  className?: string;\r\n}\r\n\r\nexport const ChatMain = memo(({ children, className }: IChatMainProps) => {\r\n  return <main className={`flex flex-col ${className}`}>{children}</main>;\r\n});\r\n","import shortUUID from \"short-uuid\";\r\nimport { IMember, IMessage } from \"../type/chatType\";\r\n\r\ninterface IChatState {\r\n  myNickname: string | null;\r\n  messages: IMessage[];\r\n  members: IMember[];\r\n}\r\n\r\ninterface IChatSetMyNicknameAction {\r\n  type: \"CHAT_SET_MY_NICKNAME\";\r\n  payload: string;\r\n}\r\n\r\ninterface IChatInitMessagesAction {\r\n  type: \"CHAT_INIT_MESSAGES\";\r\n  payload: IMessage[];\r\n}\r\n\r\ninterface IChatAddMessageAction {\r\n  type: \"CHAT_ADD_MESSAGE\";\r\n  payload: IMessage;\r\n}\r\n\r\ninterface ICHatSetMembersAction {\r\n  type: \"CHAT_SET_MEMBERS\";\r\n  payload: IMember[];\r\n}\r\n\r\ninterface IChatAddMemberAction {\r\n  type: \"CHAT_ADD_MEMBER\";\r\n  payload: IMember;\r\n}\r\n\r\ninterface IChatJoinMemberAction {\r\n  type: \"CHAT_JOIN_MEMBER\";\r\n  payload: IMember;\r\n}\r\n\r\ninterface IChatLeaveMemberAction {\r\n  type: \"CHAT_LEAVE_MEMBER\";\r\n  payload: IMember;\r\n}\r\n\r\nexport type IChatAction =\r\n  | IChatInitMessagesAction\r\n  | IChatAddMessageAction\r\n  | IChatAddMemberAction\r\n  | IChatSetMyNicknameAction\r\n  | ICHatSetMembersAction\r\n  | IChatJoinMemberAction\r\n  | IChatLeaveMemberAction;\r\n\r\nexport const initialChatState: IChatState = {\r\n  myNickname: \"\",\r\n  messages: [],\r\n  members: [],\r\n};\r\n\r\nexport const chatReducer = (\r\n  state: IChatState,\r\n  action: IChatAction\r\n): IChatState => {\r\n  switch (action.type) {\r\n    case \"CHAT_INIT_MESSAGES\":\r\n      return {\r\n        ...state,\r\n        messages: action.payload,\r\n      };\r\n    case \"CHAT_ADD_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.payload],\r\n      };\r\n    case \"CHAT_SET_MEMBERS\":\r\n      return {\r\n        ...state,\r\n        members: action.payload,\r\n      };\r\n    case \"CHAT_ADD_MEMBER\":\r\n      return {\r\n        ...state,\r\n        members: [...state.members, action.payload],\r\n      };\r\n    case \"CHAT_SET_MY_NICKNAME\":\r\n      return {\r\n        ...state,\r\n        myNickname: action.payload,\r\n      };\r\n    case \"CHAT_JOIN_MEMBER\":\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          {\r\n            type: \"join\",\r\n            id: shortUUID.generate(),\r\n            ...action.payload,\r\n            timestamp: Date.now(),\r\n          },\r\n        ],\r\n      };\r\n    case \"CHAT_LEAVE_MEMBER\":\r\n      return {\r\n        ...state,\r\n        messages: [\r\n          ...state.messages,\r\n          {\r\n            type: \"leave\",\r\n            id: shortUUID.generate(),\r\n            ...action.payload,\r\n            timestamp: Date.now(),\r\n          },\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const createMessage = (\r\n  message: Omit<IMessage, \"id\" | \"timestamp\" | \"type\">\r\n): IMessage => ({\r\n  type: \"message\",\r\n  id: shortUUID.generate(),\r\n  ...message,\r\n  timestamp: Date.now(),\r\n});\r\n","import _ from \"lodash\";\r\nimport {\r\n  forwardRef,\r\n  useImperativeHandle,\r\n  useRef,\r\n  ReactNode,\r\n  memo,\r\n  useMemo,\r\n} from \"react\";\r\nimport dayjs from \"dayjs\";\r\nimport { BsCheckAll } from \"react-icons/bs\";\r\nimport { IMessage } from \"../type/chatType\";\r\n\r\ninterface IChatMessagesProps {\r\n  messages: IMessage[];\r\n  myNickname: string | null;\r\n}\r\n\r\nexport interface IChatMessagesRef {\r\n  scrollToBottom: () => void;\r\n}\r\n\r\nexport const ChatMessages = memo(\r\n  forwardRef<IChatMessagesRef, IChatMessagesProps>(\r\n    ({ messages, myNickname }, ref) => {\r\n      const messagesRef = useRef<HTMLUListElement>(null);\r\n      const sortedMessages = useMemo(() => {\r\n        return _.sortBy(messages, \"timestamp\");\r\n      }, [messages]);\r\n\r\n      useImperativeHandle(ref, () => ({\r\n        scrollToBottom: () => {\r\n          messagesRef.current?.scrollTo({\r\n            top: messagesRef.current.scrollHeight,\r\n            behavior: \"smooth\",\r\n          });\r\n        },\r\n      }));\r\n\r\n      let prevDate = \"\";\r\n      let prevMessage: IMessage | null = null;\r\n\r\n      return (\r\n        <ul\r\n          ref={messagesRef}\r\n          className=\"flex flex-col-reverse h-full gap-2 p-5 overflow-auto\"\r\n        >\r\n          {sortedMessages\r\n            .reduce<ReactNode[]>((acc, message) => {\r\n              const isMine = message.nickname === myNickname;\r\n              const date = dayjs(message.timestamp).format(\"YYYY.MM.DD (ddd)\");\r\n\r\n              // 날짜 표시\r\n              if (prevDate !== date) {\r\n                prevDate = date;\r\n                acc.push(<ChatDateMessage key={date} date={date} />);\r\n              }\r\n\r\n              // 멤버 입퇴장 표시\r\n              if (message.type === \"join\" || message.type === \"leave\") {\r\n                acc.push(\r\n                  <ChatMemberMessage key={message.id} message={message} />\r\n                );\r\n                return acc;\r\n              }\r\n\r\n              // 연결메세지 (이전 메시지와 같은 사용자의 메시지이며 1분 이내의 메시지)\r\n              if (\r\n                prevMessage &&\r\n                prevMessage.nickname === message.nickname &&\r\n                Math.abs(dayjs(prevMessage.timestamp).diff(message.timestamp)) <\r\n                  1000 * 60\r\n              ) {\r\n                acc.push(\r\n                  <ChatMessage\r\n                    key={message.id}\r\n                    message={message}\r\n                    isMine={isMine}\r\n                    contentOnly\r\n                  />\r\n                );\r\n                return acc;\r\n              }\r\n\r\n              // 새 메시지\r\n              prevMessage = message;\r\n              acc.push(\r\n                <ChatMessage\r\n                  key={message.id}\r\n                  message={message}\r\n                  isMine={isMine}\r\n                />\r\n              );\r\n              return acc;\r\n            }, [])\r\n            .reverse()}\r\n        </ul>\r\n      );\r\n    }\r\n  )\r\n);\r\n\r\nconst ChatDateMessage = memo(({ date }: { date: string }) => {\r\n  return (\r\n    <div className=\"flex justify-center items-center text-gray-400 px-1 pt-2\">\r\n      <BsCheckAll className=\"inline-block text-lg mr-1 text-green-500\" />\r\n      <span className=\"text-sm\">{date}</span>\r\n    </div>\r\n  );\r\n});\r\n\r\ninterface IChatMessageProps {\r\n  message: IMessage;\r\n  isMine: boolean;\r\n  contentOnly?: boolean;\r\n}\r\nexport const ChatMessage = memo(\r\n  ({ message, isMine, contentOnly }: IChatMessageProps) => {\r\n    const myMessageStyle = useMemo(() => {\r\n      return isMine ? \"self-end items-end\" : \"self-start items-start\";\r\n    }, [isMine]);\r\n\r\n    const myMessageContentStyle = useMemo(() => {\r\n      return isMine ? \"bg-blue-500 text-white\" : \"bg-white\";\r\n    }, [isMine]);\r\n\r\n    const contentOnlyStyle = useMemo(() => {\r\n      return contentOnly ? \"\" : \"pt-1\";\r\n    }, [contentOnly]);\r\n\r\n    return (\r\n      <li\r\n        key={message.id}\r\n        className={`flex flex-col gap-1 px-1 ${contentOnlyStyle} ${myMessageStyle}`}\r\n      >\r\n        {!contentOnly && (\r\n          <div className=\"flex gap-2 px-2 pt-1 items-center\">\r\n            <div className=\"font-bold text-sm\">{message.nickname}</div>\r\n            <div className=\"text-sm text-gray-400\">\r\n              {dayjs(message.timestamp).format(\"hh:mm A\")}\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div\r\n          className={`rounded-xl inline-block py-2 px-3 w-fit max-w-lg whitespace-pre-line ${myMessageContentStyle}`}\r\n        >\r\n          {message.content}\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n);\r\n\r\nexport const ChatMemberMessage = memo(({ message }: { message: IMessage }) => {\r\n  const enterOrLeave = useMemo(() => {\r\n    return message.type === \"join\" ? \"입장\" : \"퇴장\";\r\n  }, [message.type]);\r\n\r\n  return (\r\n    <li className=\"text-center text-sm text-gray-500 my-2\">\r\n      <span className=\"text-base\">☁️</span> {message.nickname} 님이{\" \"}\r\n      {enterOrLeave}\r\n      하셨습니다.\r\n    </li>\r\n  );\r\n});\r\n","import { memo, useMemo } from \"react\";\r\nimport Gravatar from \"react-gravatar\";\r\nimport { IMember } from \"../type/chatType\";\r\n\r\ninterface IChatMembersProps {\r\n  members: IMember[];\r\n  myNickname: string | null;\r\n}\r\n\r\nexport const ChatMembers = memo(\r\n  ({ members, myNickname }: IChatMembersProps) => {\r\n    const shortedMembers = useMemo(() => {\r\n      return [\r\n        ...members.filter((member) => member.nickname === myNickname),\r\n        ...members.filter((member) => member.nickname !== myNickname),\r\n      ];\r\n    }, [members, myNickname]);\r\n\r\n    return (\r\n      <ul className=\"flex flex-col gap-3 py-6 px-3\">\r\n        {shortedMembers.map((member) => {\r\n          return (\r\n            <ChatMember\r\n              key={member.nickname}\r\n              member={member}\r\n              isMe={member.nickname === myNickname}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  }\r\n);\r\n\r\ninterface IChatMemberProps {\r\n  member: IMember;\r\n  isMe: boolean;\r\n}\r\nconst ChatMember = memo(({ member, isMe }: IChatMemberProps) => {\r\n  const meStyle = useMemo(() => {\r\n    return isMe ? \"bg-slate-400 rounded-lg\" : \"\";\r\n  }, [isMe]);\r\n\r\n  return (\r\n    <li className={`flex p-3 gap-3 text-white ${meStyle}`}>\r\n      <Gravatar\r\n        email={member.nickname}\r\n        size={40}\r\n        default=\"mp\"\r\n        className=\"rounded-lg\"\r\n      />\r\n      <div\r\n        title={member.nickname}\r\n        className=\"flex items-center whitespace-nowrap overflow-hidden text-ellipsis\"\r\n      >\r\n        {member.nickname}\r\n      </div>\r\n    </li>\r\n  );\r\n});\r\n","import { useRef, useCallback, useLayoutEffect } from \"react\";\r\nimport { IWebSocketMessage } from \"../type/webSocketType\";\r\n\r\ninterface IChatConnection {\r\n  chatRoomId: string;\r\n  nickname: string;\r\n  ws: WebSocket;\r\n  close: () => void;\r\n  cancel: () => void;\r\n  isSame: (compare: { chatRoomId: string; nickname: string }) => boolean;\r\n  isClosed: () => boolean;\r\n}\r\n\r\nexport const useChatConnection = (\r\n  chatRoomId?: string,\r\n  nickname?: string | null\r\n) => {\r\n  const connectionRef = useRef<IChatConnection | null>(null);\r\n  const messageHandlerRef = useRef<(message: IWebSocketMessage) => void>();\r\n\r\n  useLayoutEffect(() => {\r\n    if (!chatRoomId || !nickname) {\r\n      return;\r\n    }\r\n    if (\r\n      connectionRef.current?.isSame({ chatRoomId, nickname }) &&\r\n      !connectionRef.current?.isClosed()\r\n    ) {\r\n      connectionRef.current?.cancel();\r\n      return;\r\n    }\r\n\r\n    const host =\r\n      process.env.NODE_ENV === \"development\"\r\n        ? process.env.REACT_APP_HOST\r\n        : window.location.host;\r\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\n    const socketUrl = `${protocol}//${host}/chat/${chatRoomId}?nickname=${nickname}`;\r\n    const ws = new WebSocket(socketUrl);\r\n    connectionRef.current = createChatConnection(chatRoomId, nickname, ws);\r\n\r\n    if (messageHandlerRef.current) {\r\n      connectionRef.current.ws.onmessage = (event) => {\r\n        const message = JSON.parse(event.data);\r\n        messageHandlerRef.current?.(message);\r\n      };\r\n    }\r\n\r\n    return () => {\r\n      connectionRef.current?.close();\r\n    };\r\n  }, [chatRoomId, nickname]);\r\n\r\n  const registMessageHandler = useCallback(\r\n    (handleMessage: (message: IWebSocketMessage) => void) => {\r\n      messageHandlerRef.current = handleMessage;\r\n    },\r\n    []\r\n  );\r\n\r\n  const sendMessage = useCallback((message: string) => {\r\n    connectionRef.current?.ws.send(message);\r\n  }, []);\r\n\r\n  const leave = useCallback(() => {\r\n    connectionRef.current?.close();\r\n  }, []);\r\n\r\n  return {\r\n    connection: connectionRef.current,\r\n    sendMessage,\r\n    leave,\r\n    registMessageHandler,\r\n  };\r\n};\r\n\r\nconst createChatConnection = (\r\n  chatRoomId: string,\r\n  nickname: string,\r\n  ws: WebSocket\r\n): IChatConnection => {\r\n  let timer: NodeJS.Timeout;\r\n\r\n  // 웹소켓 연결이 열렸을 때 실행되는 함수\r\n  ws.onopen = () => {\r\n    console.log(\"Connected to the chat server\");\r\n  };\r\n\r\n  // 웹소켓 연결이 닫혔을 때 실행되는 함수\r\n  ws.onclose = () => {\r\n    console.log(\"Disconnected from the chat server\");\r\n  };\r\n\r\n  const close = () => {\r\n    timer = setTimeout(() => {\r\n      ws.close();\r\n    }, 100);\r\n  };\r\n\r\n  const cancel = () => {\r\n    clearTimeout(timer);\r\n  };\r\n\r\n  const isSame = (compare: { chatRoomId: string; nickname: string }) => {\r\n    return chatRoomId === compare.chatRoomId && nickname === compare.nickname;\r\n  };\r\n\r\n  const isClosed = () => {\r\n    return (\r\n      ws.readyState === WebSocket.CLOSED || ws.readyState === WebSocket.CLOSING\r\n    );\r\n  };\r\n\r\n  return {\r\n    chatRoomId,\r\n    nickname,\r\n    ws,\r\n    close,\r\n    cancel,\r\n    isSame,\r\n    isClosed,\r\n  };\r\n};\r\n","import { IChatAction } from \"../store/chatReducer\";\r\nimport { IWebSocketMessage } from \"../type/webSocketType\";\r\nimport { onClients } from \"./listen/clients\";\r\nimport { onJoin } from \"./listen/join\";\r\nimport { onLeave } from \"./listen/leave\";\r\nimport { onMessage } from \"./listen/message\";\r\n\r\nexport const onWebSocketMessage = (\r\n  webSocketMessage: IWebSocketMessage,\r\n  dispatch: React.Dispatch<IChatAction>\r\n) => {\r\n  switch (webSocketMessage.type) {\r\n    case \"clients\":\r\n      onClients(webSocketMessage, dispatch);\r\n      break;\r\n    case \"join\":\r\n      onJoin(webSocketMessage, dispatch);\r\n      break;\r\n    case \"leave\":\r\n      onLeave(webSocketMessage, dispatch);\r\n      break;\r\n    case \"message\":\r\n      onMessage(webSocketMessage, dispatch);\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","import { IChatAction } from \"../../store/chatReducer\";\r\nimport { IWebSocketMessage } from \"../../type/webSocketType\";\r\n\r\nexport const onClients = (\r\n  webSocketMessage: IWebSocketMessage,\r\n  dispatch: React.Dispatch<IChatAction>\r\n) => {\r\n  dispatch({\r\n    type: \"CHAT_SET_MEMBERS\",\r\n    payload: webSocketMessage.clients,\r\n  });\r\n};\r\n","import { IChatAction } from \"../../store/chatReducer\";\r\nimport { IWebSocketMessage } from \"../../type/webSocketType\";\r\n\r\nexport const onJoin = (\r\n  webSocketMessage: IWebSocketMessage,\r\n  dispatch: React.Dispatch<IChatAction>\r\n) => {\r\n  dispatch({\r\n    type: \"CHAT_JOIN_MEMBER\",\r\n    payload: {\r\n      nickname: webSocketMessage.nickname,\r\n    },\r\n  });\r\n\r\n  dispatch({\r\n    type: \"CHAT_SET_MEMBERS\",\r\n    payload: webSocketMessage.clients,\r\n  });\r\n};\r\n","import { IChatAction } from \"../../store/chatReducer\";\r\nimport { IWebSocketMessage } from \"../../type/webSocketType\";\r\n\r\nexport const onLeave = (\r\n  webSocketMessage: IWebSocketMessage,\r\n  dispatch: React.Dispatch<IChatAction>\r\n) => {\r\n  dispatch({\r\n    type: \"CHAT_LEAVE_MEMBER\",\r\n    payload: {\r\n      nickname: webSocketMessage.nickname,\r\n    },\r\n  });\r\n\r\n  dispatch({\r\n    type: \"CHAT_SET_MEMBERS\",\r\n    payload: webSocketMessage.clients,\r\n  });\r\n};\r\n","import { IChatAction, createMessage } from \"../../store/chatReducer\";\r\nimport { IWebSocketMessage } from \"../../type/webSocketType\";\r\n\r\nexport const onMessage = (\r\n  webSocketMessage: IWebSocketMessage,\r\n  dispatch: React.Dispatch<IChatAction>\r\n) => {\r\n  const message = createMessage({\r\n    nickname: webSocketMessage.nickname,\r\n    content: webSocketMessage.message,\r\n  });\r\n\r\n  dispatch({\r\n    type: \"CHAT_ADD_MESSAGE\",\r\n    payload: message,\r\n  });\r\n};\r\n","import { useState, useRef, useCallback, useEffect, memo, useMemo } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { ChatBackground } from \"../component/ChatBackground\";\r\nimport { ChatBox } from \"../component/ChatBox\";\r\nimport { ChatContainer } from \"../component/ChatContainer\";\r\nimport { ChatFooter } from \"../component/ChatFooter\";\r\nimport { ChatHeader } from \"../component/ChatHeader\";\r\nimport { useWindowSize } from \"../hook/useWindowSize\";\r\nimport { ChatEditor } from \"../component/ChatEditor\";\r\nimport { ChatMain } from \"../component/ChatMain\";\r\nimport { useChatStore } from \"../hook/useChatStore\";\r\nimport { ChatMessages, IChatMessagesRef } from \"../component/ChatMessages\";\r\nimport { ChatMembers } from \"../component/ChatMembers\";\r\nimport { useChatConnection } from \"../hook/useChatConnect\";\r\nimport { onWebSocketMessage } from \"../webSocket/messageHandler\";\r\nimport { useCssVar } from \"../hook/useCssVar\";\r\nimport { createMessage } from \"../store/chatReducer\";\r\nimport { checkNicknameAsync } from \"../api/checkNickname\";\r\n\r\nconst Chat = memo(() => {\r\n  useCssVar();\r\n  const { roomId } = useParams<{ roomId: string }>();\r\n  const { isSmall } = useWindowSize();\r\n  const navigate = useNavigate();\r\n  const chatMessageRef = useRef<IChatMessagesRef>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [isOpenMembers, setIsOpenMembers] = useState(isSmall ? false : true);\r\n  const { messages, members, myNickname, dispatch } = useChatStore(roomId);\r\n  const { sendMessage, leave, registMessageHandler } = useChatConnection(\r\n    roomId,\r\n    myNickname\r\n  );\r\n  registMessageHandler((message) => {\r\n    onWebSocketMessage(message, dispatch);\r\n  });\r\n\r\n  const chatMainStyle = useMemo(() => {\r\n    return isOpenMembers ? \"flex-1\" : \"flex-1\";\r\n  }, [isOpenMembers]);\r\n\r\n  const membersStyle = useMemo(() => {\r\n    return isOpenMembers ? \"w-full sm:w-72\" : \"w-0\";\r\n  }, [isOpenMembers]);\r\n\r\n  const toggleOpenMembers = useCallback(() => {\r\n    setIsOpenMembers((prev) => !prev);\r\n  }, []);\r\n\r\n  const onSendMessage = useCallback(\r\n    (content: string) => {\r\n      if (!myNickname) {\r\n        return;\r\n      }\r\n      sendMessage(content);\r\n\r\n      const message = createMessage({\r\n        content,\r\n        nickname: myNickname,\r\n      });\r\n      dispatch({\r\n        type: \"CHAT_ADD_MESSAGE\",\r\n        payload: message,\r\n      });\r\n    },\r\n    [sendMessage, dispatch, myNickname]\r\n  );\r\n\r\n  const onLeave = useCallback(() => {\r\n    leave();\r\n    navigate(\"/\");\r\n  }, [leave, navigate]);\r\n\r\n  // 사용자에게 닉네임 입력 받기\r\n  useEffect(() => {\r\n    if (myNickname || !roomId) {\r\n      return;\r\n    }\r\n    const nickname = prompt(\"닉네임을 입력해 주세요\");\r\n    if (!nickname) {\r\n      alert(\"닉네임은 필수 입력입니다\");\r\n      navigate(\"/\");\r\n      return;\r\n    }\r\n\r\n    checkNicknameAsync(roomId, nickname).then((available) => {\r\n      if (!available) {\r\n        alert(\"이미 사용중인 닉네임입니다\");\r\n        navigate(\"/\");\r\n      } else {\r\n        dispatch({ type: \"CHAT_SET_MY_NICKNAME\", payload: nickname });\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // 메세지가 추가될 때마다 스크롤을 맨 아래로 이동\r\n  useEffect(() => {\r\n    chatMessageRef.current?.scrollToBottom();\r\n    containerRef.current?.scrollIntoView({ block: \"end\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <ChatBackground>\r\n      <ChatContainer>\r\n        <ChatBox>\r\n          <ChatHeader\r\n            title={roomId ?? \"\"}\r\n            memberCount={members.length}\r\n            isOpenMembers={isOpenMembers}\r\n            toggleOpenMembers={toggleOpenMembers}\r\n            onLeave={onLeave}\r\n          />\r\n          <div\r\n            ref={containerRef}\r\n            className=\"relative flex-1 flex bg-slate-100 h-1\"\r\n          >\r\n            <ChatMain className={chatMainStyle}>\r\n              <section className=\"flex-1 h-1\">\r\n                <ChatMessages\r\n                  ref={chatMessageRef}\r\n                  messages={messages}\r\n                  myNickname={myNickname}\r\n                />\r\n              </section>\r\n              <section className=\"bg-white\">\r\n                <ChatEditor\r\n                  disabled={!myNickname ? true : false}\r\n                  onSend={onSendMessage}\r\n                />\r\n              </section>\r\n            </ChatMain>\r\n            <aside\r\n              className={`${membersStyle} absolute right-0 sm:relative h-full bg-slate-500 transition-all overflow-auto`}\r\n            >\r\n              <ChatMembers members={members} myNickname={myNickname} />\r\n            </aside>\r\n          </div>\r\n        </ChatBox>\r\n        {!isSmall && <ChatFooter />}\r\n      </ChatContainer>\r\n    </ChatBackground>\r\n  );\r\n});\r\n\r\nexport default Chat;\r\n","import { useReducer, useLayoutEffect, useCallback } from \"react\";\r\nimport {\r\n  IChatAction,\r\n  chatReducer,\r\n  initialChatState,\r\n} from \"../store/chatReducer\";\r\nimport { chatDB } from \"../store/chatDB\";\r\n\r\nexport const useChatStore = (roomId?: string) => {\r\n  const [{ messages, members, myNickname }, dispatch] = useReducer(\r\n    chatReducer,\r\n    initialChatState\r\n  );\r\n\r\n  const dispatchMiddleware = useCallback(\r\n    (action: IChatAction) => {\r\n      if (roomId) {\r\n        switch (action.type) {\r\n          case \"CHAT_ADD_MESSAGE\":\r\n            chatDB.saveMessages(roomId, [...messages, action.payload]);\r\n            break;\r\n        }\r\n      }\r\n      dispatch(action);\r\n    },\r\n    [roomId, messages]\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    if (roomId) {\r\n      chatDB.getMessagesByRoomId(roomId).then((messages) => {\r\n        dispatch({\r\n          type: \"CHAT_INIT_MESSAGES\",\r\n          payload: messages,\r\n        });\r\n      });\r\n    }\r\n  }, [roomId]);\r\n\r\n  return {\r\n    messages,\r\n    members,\r\n    myNickname,\r\n    dispatch: dispatchMiddleware,\r\n  };\r\n};\r\n","export const checkNicknameAsync = (\r\n  chatRoomId: string,\r\n  nickname: string\r\n): Promise<boolean> => {\r\n  return fetch(\r\n    `/api/chat-rooms/${chatRoomId}/check-nickname?nickname=${nickname}`\r\n  )\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      return data.available;\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Failed to check nickname availability:\", error);\r\n      return false;\r\n    });\r\n};\r\n","import _ from \"lodash\";\r\nimport { IChatRoom, IMessage } from \"../type/chatType\";\r\n\r\n// IndexedDB 초기화\r\nconst openDB = (): Promise<IDBDatabase> => {\r\n  return new Promise((resolve, reject) => {\r\n    const request = window.indexedDB.open(\"ChatDB\", 1);\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"IndexedDB에 접근하는 동안 오류가 발생했습니다.\");\r\n      reject(\"오류\");\r\n    };\r\n\r\n    request.onsuccess = (event: any) => {\r\n      const db = event.target.result as IDBDatabase;\r\n      resolve(db);\r\n    };\r\n\r\n    request.onupgradeneeded = (event: any) => {\r\n      const db = event.target.result as IDBDatabase;\r\n      const objectStore = db.createObjectStore(\"Chats\", { keyPath: \"roomId\" });\r\n      objectStore.createIndex(\"roomId\", \"roomId\", { unique: true });\r\n    };\r\n  });\r\n};\r\n\r\n// 여러 메시지 한꺼번에 저장\r\nconst saveMessages = async (\r\n  roomId: string,\r\n  messages: IMessage[]\r\n): Promise<void> => {\r\n  const db = await openDB();\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction(\"Chats\", \"readwrite\");\r\n    const objectStore = transaction.objectStore(\"Chats\");\r\n\r\n    const request = objectStore.get(roomId);\r\n\r\n    request.onsuccess = (event: any) => {\r\n      let chatData = event.target.result as\r\n        | { roomId: string; messages: IMessage[] }\r\n        | undefined;\r\n      chatData = chatData || { roomId, messages: [] };\r\n      chatData.messages = messages;\r\n      const updateRequest = objectStore.put(chatData);\r\n\r\n      updateRequest.onerror = (event) => {\r\n        console.error(\"메시지를 저장하는 동안 오류가 발생했습니다.\");\r\n        reject(\"오류\");\r\n      };\r\n\r\n      updateRequest.onsuccess = (event) => {\r\n        resolve();\r\n      };\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"채팅방 데이터를 가져오는 동안 오류가 발생했습니다.\");\r\n      reject(\"오류\");\r\n    };\r\n  });\r\n};\r\n\r\n// 전체 채팅방 데이터 조회\r\nconst getAllChatRooms = async (): Promise<IChatRoom[]> => {\r\n  const db = await openDB();\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction(\"Chats\", \"readonly\");\r\n    const objectStore = transaction.objectStore(\"Chats\");\r\n    const request = objectStore.getAll();\r\n\r\n    request.onsuccess = (event: any) => {\r\n      const orgChatRooms = event.target.result as {\r\n        roomId: string;\r\n        messages: IMessage[];\r\n      }[];\r\n      const chatRooms = orgChatRooms\r\n        .map((chatRoom) => {\r\n          const latestMessage = _.sortBy(\r\n            chatRoom.messages,\r\n            \"timestamp\"\r\n          ).pop() as IMessage;\r\n          return {\r\n            roomId: chatRoom.roomId,\r\n            latestMessage,\r\n          };\r\n        })\r\n        .filter((chatRoom) => chatRoom.latestMessage);\r\n      resolve(chatRooms);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"전체 채팅방 데이터를 가져오는 동안 오류가 발생했습니다.\");\r\n      reject(\"오류\");\r\n    };\r\n  });\r\n};\r\n\r\n// 특정 채팅방의 메시지 가져오기\r\nconst getMessagesByRoomId = async (roomId: string): Promise<IMessage[]> => {\r\n  const db = await openDB();\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction(\"Chats\", \"readonly\");\r\n    const objectStore = transaction.objectStore(\"Chats\");\r\n\r\n    const request = objectStore.get(roomId);\r\n\r\n    request.onsuccess = (event: any) => {\r\n      const chatData = event.target.result as\r\n        | { roomId: string; messages: IMessage[] }\r\n        | undefined;\r\n      const messages = chatData ? chatData.messages : [];\r\n      resolve(messages);\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"채팅방 데이터를 가져오는 동안 오류가 발생했습니다.\");\r\n      reject(\"오류\");\r\n    };\r\n  });\r\n};\r\n\r\n// 채팅방 삭제\r\nconst deleteChatRoom = async (roomId: string): Promise<void> => {\r\n  const db = await openDB();\r\n  return new Promise((resolve, reject) => {\r\n    const transaction = db.transaction(\"Chats\", \"readwrite\");\r\n    const objectStore = transaction.objectStore(\"Chats\");\r\n\r\n    const request = objectStore.delete(roomId);\r\n\r\n    request.onsuccess = (event) => {\r\n      resolve();\r\n    };\r\n\r\n    request.onerror = (event) => {\r\n      console.error(\"채팅방을 삭제하는 동안 오류가 발생했습니다.\");\r\n      reject(\"오류\");\r\n    };\r\n  });\r\n};\r\n\r\nexport const chatDB = {\r\n  saveMessages,\r\n  getAllChatRooms,\r\n  getMessagesByRoomId,\r\n  deleteChatRoom,\r\n};\r\n"],"names":["useCssVar","useLayoutEffect","vh","window","innerHeight","document","documentElement","style","setProperty","concat","ChatBackground","memo","_ref","children","_jsx","className","height","ChatBox","ChatContainer","ChatFooter","_jsxs","href","target","rel","Badge","ChatHeader","title","memberCount","isOpenMembers","toggleOpenMembers","onLeave","membersStyle","useMemo","onClickLeave","useCallback","confirm","src","imgChat","alt","onClick","BsPeopleFill","BiExit","useWindowSize","_useState","useState","width","innerWidth","_useState2","_slicedToArray","size","setSize","handleResize","addEventListener","removeEventListener","isSmall","ChatEditor","disabled","onSend","content","setContent","_useDevice","isMobile","test","navigator","userAgent","isDesktop","useDevice","editorRef","useRef","sendStyle","sendContent","_","onChange","e","value","onKeyDown","key","shiftKey","preventDefault","_editorRef$current","current","focus","_Fragment","TextareaAutosize","ref","minRows","maxRows","autoFocus","placeholder","PiPaperPlaneRightFill","ChatMain","initialChatState","myNickname","messages","members","chatReducer","state","action","type","_objectSpread","payload","_toConsumableArray","id","shortUUID","timestamp","Date","now","createMessage","message","ChatMessages","forwardRef","messagesRef","sortedMessages","useImperativeHandle","scrollToBottom","_messagesRef$current","scrollTo","top","scrollHeight","behavior","prevDate","prevMessage","reduce","acc","isMine","nickname","date","dayjs","format","push","ChatDateMessage","ChatMemberMessage","Math","abs","diff","ChatMessage","contentOnly","reverse","_ref2","BsCheckAll","_ref3","myMessageStyle","myMessageContentStyle","contentOnlyStyle","_ref4","enterOrLeave","ChatMembers","shortedMembers","filter","member","map","ChatMember","isMe","meStyle","Gravatar","email","default","createChatConnection","chatRoomId","ws","timer","onopen","console","log","onclose","close","setTimeout","cancel","clearTimeout","isSame","compare","isClosed","readyState","WebSocket","CLOSED","CLOSING","onWebSocketMessage","webSocketMessage","dispatch","clients","onClients","onJoin","onMessage","Chat","roomId","useParams","navigate","useNavigate","chatMessageRef","containerRef","setIsOpenMembers","_useChatStore","_useReducer","useReducer","_useReducer2","_useReducer2$","dispatchMiddleware","chatDB","saveMessages","getMessagesByRoomId","then","useChatStore","_useChatConnection","connectionRef","messageHandlerRef","_connectionRef$curren","_connectionRef$curren2","host","location","protocol","socketUrl","onmessage","event","_messageHandlerRef$cu","JSON","parse","data","call","_connectionRef$curren4","_connectionRef$curren3","registMessageHandler","handleMessage","sendMessage","_connectionRef$curren5","send","leave","_connectionRef$curren6","connection","useChatConnection","chatMainStyle","prev","onSendMessage","useEffect","prompt","alert","fetch","response","json","available","catch","error","checkNicknameAsync","_chatMessageRef$curre","_containerRef$current","scrollIntoView","block","length","openDB","Promise","resolve","reject","request","indexedDB","open","onerror","onsuccess","db","result","onupgradeneeded","createObjectStore","keyPath","createIndex","unique","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","sent","abrupt","objectStore","transaction","get","chatData","updateRequest","put","stop","_x","_x2","apply","arguments","getAllChatRooms","_callee2","_context2","getAll","chatRooms","chatRoom","latestMessage","pop","_callee3","_context3","_x3","deleteChatRoom","_callee4","_context4","delete","_x4"],"sourceRoot":""}